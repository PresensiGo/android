/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.rizalanggoro.presensigo.openapi.apis

import com.rizalanggoro.presensigo.openapi.models.GetAccountRes
import com.rizalanggoro.presensigo.openapi.models.LoginReq
import com.rizalanggoro.presensigo.openapi.models.LoginRes
import com.rizalanggoro.presensigo.openapi.models.LogoutReq
import com.rizalanggoro.presensigo.openapi.models.RefreshTokenReq
import com.rizalanggoro.presensigo.openapi.models.RefreshTokenRes
import com.rizalanggoro.presensigo.openapi.models.RequestsUpdateAccountPassword
import com.rizalanggoro.presensigo.openapi.models.RequestsUpdateAccountRole
import com.rizalanggoro.presensigo.openapi.models.ResponsesDeleteAccount
import com.rizalanggoro.presensigo.openapi.models.ResponsesGetAllUsers
import com.rizalanggoro.presensigo.openapi.models.ResponsesLogout
import com.rizalanggoro.presensigo.openapi.models.ResponsesUpdateAccountPassword
import com.rizalanggoro.presensigo.openapi.models.ResponsesUpdateAccountRole

import com.rizalanggoro.presensigo.openapi.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder
import com.google.gson.Gson
import com.google.gson.GsonBuilder
import java.text.DateFormat

    open class AccountApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonBlock: GsonBuilder.() -> Unit = ApiClient.JSON_DEFAULT,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
        jsonBlock,
    ) {

        /**
        * DELETE /api/v1/accounts/{account_id}
        * 
        * 
         * @param accountId account id 
         * @return ResponsesDeleteAccount
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun apiV1AccountsAccountIdDelete(accountId: kotlin.Int): HttpResponse<ResponsesDeleteAccount> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/v1/accounts/{account_id}".replace("{" + "account_id" + "}", "$accountId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * PUT /api/v1/accounts/{account_id}/password
        * 
        * 
         * @param accountId account id 
         * @param body body 
         * @return ResponsesUpdateAccountPassword
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun apiV1AccountsAccountIdPasswordPut(accountId: kotlin.Int, body: RequestsUpdateAccountPassword): HttpResponse<ResponsesUpdateAccountPassword> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = body

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/api/v1/accounts/{account_id}/password".replace("{" + "account_id" + "}", "$accountId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * PUT /api/v1/accounts/{account_id}/role
        * 
        * 
         * @param accountId account id 
         * @param body body 
         * @return ResponsesUpdateAccountRole
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun apiV1AccountsAccountIdRolePut(accountId: kotlin.Int, body: RequestsUpdateAccountRole): HttpResponse<ResponsesUpdateAccountRole> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = body

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/api/v1/accounts/{account_id}/role".replace("{" + "account_id" + "}", "$accountId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /api/v1/accounts
        * 
        * 
         * @return ResponsesGetAllUsers
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun apiV1AccountsGet(): HttpResponse<ResponsesGetAllUsers> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/accounts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /api/v1/accounts/profile
        * 
        * 
         * @return GetAccountRes
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getAccount(): HttpResponse<GetAccountRes> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/accounts/profile",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /api/v1/auth/login
        * 
        * 
         * @param body body 
         * @return LoginRes
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun login(body: LoginReq): HttpResponse<LoginRes> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = body

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/v1/auth/login",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /api/v1/auth/logout
        * 
        * 
         * @param body Logout Request 
         * @return ResponsesLogout
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun logout(body: LogoutReq): HttpResponse<ResponsesLogout> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = body

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/v1/auth/logout",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /api/v1/auth/refresh-token
        * 
        * 
         * @param body body 
         * @return RefreshTokenRes
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun refreshToken(body: RefreshTokenReq): HttpResponse<RefreshTokenRes> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = body

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/v1/auth/refresh-token",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
