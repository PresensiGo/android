/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.rizalanggoro.presensigo.openapi.apis

import com.rizalanggoro.presensigo.openapi.models.ApiInternalFeaturesBatchDtoRequestsUpdate
import com.rizalanggoro.presensigo.openapi.models.Batch
import com.rizalanggoro.presensigo.openapi.models.CreateGeneralAttendanceReq
import com.rizalanggoro.presensigo.openapi.models.ResponsesGetAllBatches
import com.rizalanggoro.presensigo.openapi.models.ResponsesGetBatch

import com.rizalanggoro.presensigo.openapi.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder
import com.google.gson.Gson
import com.google.gson.GsonBuilder
import java.text.DateFormat

    open class BatchApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonBlock: GsonBuilder.() -> Unit = ApiClient.JSON_DEFAULT,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
        jsonBlock,
    ) {

        /**
        * GET /api/v1/batches/{batch_id}
        * 
        * 
         * @param batchId batch id 
         * @return ResponsesGetBatch
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun apiV1BatchesBatchIdGet(batchId: kotlin.Int): HttpResponse<ResponsesGetBatch> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/batches/{batch_id}".replace("{" + "batch_id" + "}", "$batchId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /api/v1/batches
        * 
        * 
         * @param body body 
         * @return Batch
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun createBatch(body: CreateGeneralAttendanceReq): HttpResponse<Batch> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = body

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/v1/batches",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * DELETE /api/v1/batches/{batch_id}
        * 
        * 
         * @param batchId batch id 
         * @return kotlin.String
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun deleteBatch(batchId: kotlin.Int): HttpResponse<kotlin.String> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/v1/batches/{batch_id}".replace("{" + "batch_id" + "}", "$batchId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /api/v1/batches
        * 
        * 
         * @return ResponsesGetAllBatches
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getAllBatches(): HttpResponse<ResponsesGetAllBatches> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/batches",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * PUT /api/v1/batches/{batch_id}
        * 
        * 
         * @param batchId batch id 
         * @param body body 
         * @return Batch
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun updateBatch(batchId: kotlin.Int, body: ApiInternalFeaturesBatchDtoRequestsUpdate): HttpResponse<Batch> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = body

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/api/v1/batches/{batch_id}".replace("{" + "batch_id" + "}", "$batchId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
